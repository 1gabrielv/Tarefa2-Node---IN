// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Usuario {
  id    String @id @default(uuid())
  nome  String
  email String @unique
  senha String
  foto  String

  posts      Post[]
  comentarios Comentario[]
  likes      Like[]

  @@map("users")
}

model Post {
  id        String   @id @default(uuid())
  titulo    String
  conteudo  String
  createdAt DateTime 

  usuario   Usuario      @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId String       

  comentarios Comentario[]
  likes     Like[]

  @@map("posts")
}

model Comentario {
  id        String   @id @default(uuid())
  conteudo  String
  createdAt DateTime @default(now()) 

  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId String  

  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String  

  likes     Like[]

  @@map("comentarios")
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) 

  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId String  

  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String? 

  comentario   Comentario? @relation(fields: [comentarioId], references: [id], onDelete: Cascade)
  comentarioId String?     

  @@map("likes")
}